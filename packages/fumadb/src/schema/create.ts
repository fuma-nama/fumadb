import type { Awaitable, MigrationContext } from "./migrate";
import type { MigrationOperation } from "./migrate/shared";

export interface Schema {
  version: string;
  tables: Record<string, Table>;

  up?: (context: MigrationContext) => Awaitable<MigrationOperation[]>;
  down?: (context: MigrationContext) => Awaitable<MigrationOperation[]>;
}

export interface Table {
  name: string;
  columns: Record<string, Column>;
}

export type TypeMap = {
  string: string;
  bigint: bigint;
  integer: number;
  decimal: number;
  bool: boolean;
  json: unknown;
  date: Date;
  timestamp: Date;
} & Record<`varchar(${number})`, string>;

export type DefaultValue<T extends keyof TypeMap> =
  | {
      sql: string;
    }
  | {
      value: TypeMap[T];
    };

export type Column =
  | BaseColumn &
      (
        | {
            type: `varchar(${number})` | "string";
            id: true;

            /**
             * - `auto`:
             *   - In SQL databases, it is generated by fumadb at runtime using `cuid`.
             *   - In MongoDB, this is a auto-generated `ObjectId`.
             */
            default?: DefaultValue<"string"> | "auto";
          }
        | {
            type: "integer";
            default?: DefaultValue<"integer">;
          }
        | {
            type: "bigint";
            default?: DefaultValue<"bigint">;
          }
        | {
            type: "bool";
            default?: DefaultValue<"bool">;
          }
        | {
            type: "json";
            default?: DefaultValue<"json">;
          }
        | {
            type: "date" | "timestamp";
            default?: DefaultValue<"date"> | "now";
          }
        | {
            type: "decimal";
            default?: DefaultValue<"decimal">;
          }
        | {
            type: `varchar(${number})` | "string";
            default?: DefaultValue<"string">;
          }
      );

interface BaseColumn {
  name: string;

  /**
   * @default false
   */
  nullable?: boolean;
}

export function schema<T extends Schema>(config: T): T {
  return config;
}

export function table<Columns extends Record<string, Column>>(
  name: string,
  columns: Columns,
  _config: {} = {}
): {
  name: string;
  columns: Columns;
} {
  return {
    name,
    columns,
  } satisfies Table;
}
